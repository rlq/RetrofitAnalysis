apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.lq.he.sum"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // work-runtime-ktx 2.1.0 and above now requires Java 8
    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled =true
    }

//    //groovy
//    configurations.all {
//        resolutionStrategy.force "org.antlr:antlr4-runtime:4.7.1"
//        resolutionStrategy.force "org.antlr:antlr4-tool:4.7.1"
//    }
//
////kotlin DSL
//    configurations.all {
//        resolutionStrategy {
//            force("org.antlr:antlr4-runtime:4.7.1")
//            force("org.antlr:antlr4-tool:4.7.1")
//        }
//    }
}


/**
 * https://www.jianshu.com/p/8962d6ba936e
 * api与implementation的区别
 * 1. impl 使用本地依赖时，编译时长 <     api使用本地依赖
 * 2. impl 使用本地依赖时，编译时长 不确定 api使用远程依赖
 * 3. impl 使用本地依赖时，隐藏编译 VS    api使用本地依赖，编译不隔离
 * 4. impl 使用远程依赖时，编译不隔离 VS   api使用远程依赖时，编译不隔离
 * ps 编译不隔离，就是指app 远程impl lib1, lib2 远程impl lib2；那么app中的代码可以调用lib2Class
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.startup:startup-runtime:1.0.0-alpha01"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.viewpager2:viewpager2:$rootProject.viewPagerVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"

    // Testing dependencies
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"
    androidTestImplementation "com.google.truth:truth:$rootProject.truthVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
}

/**
 * 以下介绍Gradle 11种技巧
 * https://mp.weixin.qq.com/s/op2BsXWI585qupjzDebzBg
 * 代码库 https://github.com/halohoop/SpeedUpGradleBuild2/blob/master/demo/build.gradle
 */
/*
def tmpSplits = null;
android {

    def buildDataTime = project.hasProperty('HaloDevBuild')? 77 : new Date().format('yyMMddHHmm').toInteger()

    defaultConfig {
        applicationId "com.halohoop.speedupgradlebuild"
        minSdkVersion 11
        versionCode buildDataTime
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    splits {
        density {
            enable true
            reset()
            include "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
        }
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for
            universalApk false //whether generate an additional APK that contains all the ABIs
        }
    }
    tmpSplits = splits
//    if(project.hasProperty('HaloDevBuild')){
//        splits.density.enable = false
//        splits.abi.enable=false
//        aaptOptions.cruncherEnabled = false
//    }
    if(project.hasProperty('HaloDevBuild')){
        splits.density.enable = false
        splits.abi {
            enable true
            reset()
            include 'arm64-v8a' //select ABIs to build APKs for
            universalApk false //whether generate an additional APK that contains all the ABIs
        }
        aaptOptions.cruncherEnabled = false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "dev"
    productFlavors {
        development {
            dimension "dev"
            minSdkVersion 21
            resConfigs "en"//"xxhdpi"
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.android.support:appcompat-v7:25.3.1'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:multidex:1.0.1'
}

task hello {
    doLast{
        println project.hasProperty('HaloDevBuild')
        println tmpSplits.density.enable
        println tmpSplits.abi.enable
    }
}
*/